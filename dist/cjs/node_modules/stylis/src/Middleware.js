'use strict';

var Enum = require('./Enum.js');
var Utility = require('./Utility.js');
var Tokenizer = require('./Tokenizer.js');
var Serializer = require('./Serializer.js');
var Prefixer = require('./Prefixer.js');

/**
 * @param {function[]} collection
 * @return {function}
 */
function middleware (collection) {
	var length = Utility.sizeof(collection);

	return function (element, index, children, callback) {
		var output = '';

		for (var i = 0; i < length; i++)
			output += collection[i](element, index, children, callback) || '';

		return output
	}
}

/**
 * @param {object} element
 * @param {number} index
 * @param {object[]} children
 * @param {function} callback
 */
function prefixer (element, index, children, callback) {
	if (element.length > -1)
		if (!element.return)
			switch (element.type) {
				case Enum.DECLARATION: element.return = Prefixer.prefix(element.value, element.length, children);
					return
				case Enum.KEYFRAMES:
					return Serializer.serialize([Tokenizer.copy(element, {value: Utility.replace(element.value, '@', '@' + Enum.WEBKIT)})], callback)
				case Enum.RULESET:
					if (element.length)
						return Utility.combine(element.props, function (value) {
							switch (Utility.match(value, /(::plac\w+|:read-\w+)/)) {
								// :read-(only|write)
								case ':read-only': case ':read-write':
									return Serializer.serialize([Tokenizer.copy(element, {props: [Utility.replace(value, /:(read-\w+)/, ':' + Enum.MOZ + '$1')]})], callback)
								// :placeholder
								case '::placeholder':
									return Serializer.serialize([
										Tokenizer.copy(element, {props: [Utility.replace(value, /:(plac\w+)/, ':' + Enum.WEBKIT + 'input-$1')]}),
										Tokenizer.copy(element, {props: [Utility.replace(value, /:(plac\w+)/, ':' + Enum.MOZ + '$1')]}),
										Tokenizer.copy(element, {props: [Utility.replace(value, /:(plac\w+)/, Enum.MS + 'input-$1')]})
									], callback)
							}

							return ''
						})
			}
}

exports.middleware = middleware;
exports.prefixer = prefixer;
